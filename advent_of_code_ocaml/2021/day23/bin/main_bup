open Mdrp_lib

module Pod = struct
  type pod = Amber | Bronze | Copper | Desert

  type t = { pod : pod; mutable abs : int; mutable ord : int }

  let ( = ) t1 t2 = t1.pod = t2.pod

  let of_string = function
    | "A" -> Amber
    | "B" -> Bronze
    | "C" -> Copper
    | "D" -> Desert
    | _ -> failwith "Wrong pod character"

  let make s abs ord = { pod = of_string s; abs; ord }

  let compare t1 t2 =
    if t1 = t2 then
      let c = Int.compare t1.abs t2.abs in
      if Stdlib.(c = 0) then Int.compare t1.ord t2.ord else c
    else
      match (t1.pod, t2.pod) with
      | Amber, _ -> -1
      | _, Amber -> 1
      | Bronze, _ -> -1
      | _, Bronze -> 1
      | Copper, _ -> -1
      | _, Copper -> 1
      | _ -> assert false

  let pp ppf t =
    Format.fprintf ppf "{%s; abs: %d; ord: %d}"
      (match t.pod with
      | Amber -> "A"
      | Bronze -> "B"
      | Copper -> "C"
      | Desert -> "D")
      t.abs t.ord

  let pp_min ppf t =
    Format.fprintf ppf "%s"
      (match t.pod with
      | Amber -> "A"
      | Bronze -> "B"
      | Copper -> "C"
      | Desert -> "D")

  (* let energy t = *)
  (*   match t.pod with *)
  (*   | Amber -> 1 *)
  (*   | Bronze -> 10 *)
  (*   | Copper -> 100 *)
  (*   | Desert -> 1000 *)

  let energy s { pod; _ } =
    s
    *
    match pod with Amber -> 1 | Bronze -> 10 | Copper -> 100 | Desert -> 1000
end

let height = ref 0

let part_1 () = height := 2

let part_2 () = height := 4

module Grid = struct
  type cell = Empty | Wall | Pod of Pod.t

  (* t.(ord in [0..height]).(abs in [0..10]) *)
  type t = private cell array array

  let pp_cell ppf = function
    | Empty -> Format.fprintf ppf "."
    | Wall -> Format.fprintf ppf "#"
    | Pod p -> Format.fprintf ppf "%a" Pod.pp_min p

  let pp ppf t =
    Format.fprintf ppf "@[<v 0>  ";
    for y = 0 to 10 do
      Format.fprintf ppf "%d" y
    done;
    (* Format.fprintf ppf "@,  "; *)
    (* for _ = 0 to 10 do *)
    (*   Format.fprintf ppf "_" *)
    (* done; *)
    Format.fprintf ppf "@,";

    Array.iteri
      (fun x a ->
        Format.fprintf ppf "%d|" x;
        Array.iter (fun p -> Format.fprintf ppf "%a" pp_cell p) a;
        Format.fprintf ppf "@,")
      t;
    Format.fprintf ppf "  ";
    for y = 0 to 10 do
      Format.fprintf ppf "%d" y
    done;
    Format.fprintf ppf "@]"

  let init file =
    let ci = open_in file in
    ignore (input_line ci);
    ignore (input_line ci);
    let t = Array.make_matrix (1 + !height) 11 Wall in
    for abs = 0 to 10 do
      t.(0).(abs) <- Empty
    done;
    let rec aux i pods =
      if i > !height then pods
      else
        let pods =
          let s = input_line ci in
          Format.eprintf "%s@." s;
          match String.split_on_char_non_empty '#' s with
          | [ p1; p2; p3; p4 ] | [ _; p1; p2; p3; p4 ] ->
              let p1 = Pod.make p1 2 i in
              let p2 = Pod.make p2 4 i in
              let p3 = Pod.make p3 6 i in
              let p4 = Pod.make p4 8 i in
              t.(i).(2) <- Pod p1;
              t.(i).(4) <- Pod p2;
              t.(i).(6) <- Pod p3;
              t.(i).(8) <- Pod p4;
              p1 :: p2 :: p3 :: p4 :: pods
          | _ -> assert false
        in
        aux (i + 1) pods
    in
    (t, aux 1 [])

  let steps sabs sord eabs eord = abs (sabs - eabs) + sord + eord

  let abs_position = function
    | Pod t -> (
        match t.pod with
        | Pod.Amber -> 2
        | Bronze -> 4
        | Copper -> 6
        | Desert -> 8)
    | _ -> assert false

  let pod_from_abs_position = function
    | 2 -> Pod.Amber
    | 4 -> Bronze
    | 6 -> Copper
    | 8 -> Desert
    | _ -> assert false

  let rec aux_home t abs ord pod =
    ord = 0
    ||
    match t.(ord).(abs) with
    | Empty -> true
    | Pod p -> Pod.(p = pod) && aux_home t abs (ord - 1) pod
    | _ -> assert false

  (* Checks that the cell is currently in its house *)
  let is_home t abs ord pod =
    ord > 0 && abs = abs_position t.(ord).(abs) && aux_home t abs !height pod

  let interleave l1 l2 =
    let rec aux acc tl1 tl2 =
      match (tl1, tl2) with
      | [], l | l, [] -> List.rev_append acc l
      | hd1 :: tl1, hd2 :: tl2 -> aux (hd1 :: hd2 :: acc) tl1 tl2
    in
    aux [] l1 l2

  (* 1- Amphipods will never stop on the space immediately outside any room *)
  let valid_hallway t abs =
    let rec go_left acc abs =
      if abs < 0 || t.(0).(abs) <> Empty then acc
      else if abs = 0 || abs = 10 || abs mod 2 <> 0 then
        go_left ((abs, 0) :: acc) (abs - 1)
      else go_left acc (abs - 1)
    in
    let rec go_right acc abs =
      if abs > 10 || t.(0).(abs) <> Empty then acc
      else if abs = 0 || abs = 10 || abs mod 2 <> 0 then
        go_right ((abs, 0) :: acc) (abs + 1)
      else go_right acc (abs + 1)
    in
    let l1 = go_right [] abs in
    let l2 = go_left [] abs in
    interleave l1 l2

  let rec free_top t abs ord =
    ord = 0
    || match t.(ord).(abs) with Empty -> free_top t abs (ord - 1) | _ -> false

  (* 2- Amphipods will never move into a room that is not their room or that contains *)
  (*    a wrong amphipod *)
  let can_go_home t abs ord =
    if ord > 1 && not (free_top t abs ord) then None
    else
      let abs' = abs_position t.(ord).(abs) in
      if abs = abs' then None
      else
        let pod = pod_from_abs_position abs' in
        let rec aux x op = x = abs' || (t.(0).(x) = Empty && aux (op x 1) op) in
        if
          aux
            (if abs < abs' then abs + 1 else abs - 1)
            (if abs < abs' then ( + ) else ( - ))
        then
          match (t.(2).(abs'), t.(1).(abs')) with
          | Pod p, Empty -> if p.pod = pod then Some [ (abs', 1) ] else None
          | Empty, Empty -> Some [ (abs', 2) ]
          | _ -> None
        else None

  (* 3- Amphipod can only stop once in the halfway. Once they go up, their next move will *)
  (*    be to go down *)

  let pod_moves t abs ord =
    match t.(ord).(abs) with
    | Pod pod -> (
        if is_home t abs ord pod (* The Pod is already home, don't move it *)
        then None
        else
          (* The pod is either in the hallway and rule 2 applies, they can *)
          (* only go down to their home or can't move or *)
          (* The pod is in a room but it's either not its home or its *)
          (* not properly filled and there's nobody above it *)
          match can_go_home t abs ord with
          (* else if *)
          | None ->
              if ord = 1 || (ord > 1 && free_top t abs (ord - 1)) then
                (* if ord = 1 || (ord = 2 && t.(1).(abs) = Empty) then *)
                match valid_hallway t abs with [] -> None | l -> Some l
              else None
          | d -> d)
    | _ -> assert false

  let move_pod t pod (eabs, eord) =
    assert (eabs <> 0 || eord = 0 || eord = 10 || eord mod 2 <> 0);
    let prev = Pod.(pod.abs, pod.ord) in
    t.(pod.ord).(pod.abs) <- Empty;
    pod.abs <- eabs;
    pod.ord <- eord;
    assert (t.(eord).(eabs) = Empty);
    t.(eord).(eabs) <- Pod pod;
    prev

  let pod_equal p = function Pod pod -> pod.pod = p | _ -> false

  let is_valid t =
    pod_equal Pod.Amber t.(!height).(2)
    && pod_equal Pod.Bronze t.(!height).(4)
    && pod_equal Pod.Copper t.(!height).(6)
    && pod_equal Pod.Desert t.(!height).(8)
    && pod_equal Pod.Amber t.(1).(2)
    && pod_equal Pod.Bronze t.(1).(4)
    && pod_equal Pod.Copper t.(1).(6)
    && pod_equal Pod.Desert t.(1).(8)

  let closer pod (abs1, ord1) (abs2, ord2) =
    abs (pod.Pod.abs - abs1)
    + abs (pod.ord - ord1)
    - (abs (pod.abs - abs2) + abs (pod.ord - ord2))

  let moves t pods =
    List.fold_left
      (fun lmoves (Pod.{ abs; ord; _ } as pod) ->
        match pod_moves t abs ord with
        | None -> lmoves
        | Some moves ->
            List.fold_left
              (fun lmoves move -> (pod, move) :: lmoves)
              lmoves moves)
      [] pods
    |> List.fast_sort (fun (pod1, move1) (pod2, move2) ->
           let c = Pod.compare pod2 pod1 in
           if c = 0 then closer pod1 move1 move2 else c)

  let cost pod (abs, ord) =
    let open Pod in
    energy (steps pod.abs pod.ord abs ord) pod

  let h_cost t pods =
    List.fold_left
      (fun acc pod ->
        let abs_t = abs_position t.(pod.Pod.ord).(pod.abs) in
        (* Format.eprintf "%a, %d" Pod.pp pod abs_t; *)
        if is_home t pod.abs pod.ord pod then (* Format.eprintf "@."; *)
          acc
        else if abs_t = pod.abs then
          let c = cost pod (abs_t + 5, !height) in
          (* Format.eprintf ", %d@." c; *)
          c + acc
        else
          let c = cost pod (abs_t, !height) in
          (* Format.eprintf ", %d@." c; *)
          c + acc)
      0 pods

  let solve t pods =
    (* let oc = open_out "out" in *)
    (* let ppf = Format.formatter_of_out_channel oc in *)
    (* let ppf = Format.err_formatter in *)
    let rec solve min_cost min_path current_cost curr_path =
      if is_valid t then (current_cost, curr_path)
      else
        let moves = moves t pods in
        (* Format.fprintf ppf *)
        (*   "@[<v 2>@[<v 0>%a@,%a@,current cost: %d, min_cost: %d@]@," pp t *)
        (*   List.( *)
        (*     pp ~pp_sep:Format.pp_print_cut *)
        (*       Pair.(pp Pod.pp Pair.(pp Int.pp Int.pp))) *)
        (*   moves current_cost min_cost; *)
        let min_cost, min_path, _, _ =
          List.fold_left
            (fun (min_cost, min_path, current_cost, curr_path) (pod, move) ->
              let cost = cost pod move + current_cost in
              let h_cost = cost + h_cost t pods in

              (* Format.eprintf "%d %d@.---------@." h_cost min_cost; *)

              (* Format.fprintf ppf "%a to %a (%d, max: %d)@," Pod.pp pod *)
              (*   Pair.(pp Int.pp Int.pp) *)
              (*   move cost min_cost; *)
              if h_cost > min_cost then
                (min_cost, min_path, current_cost, curr_path)
              else
                let ppod = { pod with abs = pod.abs; ord = pod.ord } in
                let prev = move_pod t pod move in
                let min_cost, min_path =
                  solve min_cost min_path cost ((ppod, move) :: curr_path)
                in
                (* Format.fprintf ppf "Received: %d@," min_cost; *)
                let _ = move_pod t pod prev in
                (min_cost, min_path, current_cost, curr_path))
            (min_cost, min_path, current_cost, curr_path)
            moves
        in
        (* Format.fprintf ppf "@]@,"; *)
        (min_cost, min_path)
    in
    solve max_int [] 0 []

  let replay t moves =
    List.iter
      (fun (pod, move) ->
        let _ = move_pod t pod move in
        Format.eprintf "%a@." pp t)
      moves
end

let () =
  let part = try Sys.argv.(1) with _ -> "2" in
  let file = try Sys.argv.(2) with _ -> "input" in
  (match part with "1" -> part_1 () | "2" -> part_2 () | _ -> ());
  let grid, pods = Grid.init file in
  let grid' = Array.copy grid in
  Format.eprintf "@[<v 2>%a@." List.(pp ~pp_sep:Format.pp_print_cut Pod.pp) pods;
  Format.eprintf "%a@." Grid.pp grid;
  let min_cost, min_path = Grid.solve grid pods in
  Format.eprintf "%d, @[<v 1>%a@]@." min_cost
    List.(
      pp ~pp_sep:Format.pp_print_cut Pair.(pp Pod.pp Pair.(pp Int.pp Int.pp)))
    (List.rev min_path);
  Format.eprintf "Grid: %a@." Grid.pp grid;
  Format.eprintf "Copy: %a@." Grid.pp grid';

  Grid.replay grid' (List.rev min_path)
